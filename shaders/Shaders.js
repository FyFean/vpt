(function(global) { Shaders = {"average":{"vertex":"#version 300 es\nprecision mediump float;\n\nin vec2 aPosition;\nout vec2 vFragmentPosition;\n\nvoid main() {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    vFragmentPosition = (aPosition + vec2(1.0, 1.0)) * 0.5;\n}","fragment":"#version 300 es\nprecision mediump float;\n\nuniform mediump sampler2D uTextureAccumulator;\nuniform mediump sampler2D uTextureNew;\nuniform float uInvn; // inverse number of samples\n\nin vec2 vFragmentPosition;\nout vec4 color;\n\nvoid main() {\n    vec4 a = texture(uTextureAccumulator, vFragmentPosition);\n    vec4 b = texture(uTextureNew, vFragmentPosition);\n    color = a + (b - a) * uInvn;\n}"},"mip":{"vertex":"#version 300 es\nprecision mediump float;\n\nlayout(location = 0) in vec2 aPosition;\nout vec2 vFragmentPosition;\n\nvoid main() {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    vFragmentPosition = aPosition;\n}","fragment":"#version 300 es\nprecision mediump float;\n\nuniform float uTime;\nuniform mediump sampler3D uVolume;\n\n// camera\nuniform vec3 uPosition;\nuniform vec3 uDirection;\nuniform vec3 uUp;\nuniform vec3 uRight;\nuniform float uFov;\nuniform float uAsr;\nuniform float uFocalDistance;\nuniform float uFocalPerturbation;\nuniform float uExposure;\n\n// TODO: interpolate ray direction without perturbation\nin vec2 vFragmentPosition;\nout vec4 color;\n\nvec2 intersectCube(vec3 origin, vec3 direction) {\n    vec3 tmin = (vec3(-1.0, -1.0, -1.0) - origin) / direction;\n    vec3 tmax = (vec3( 1.0,  1.0,  1.0) - origin) / direction;\n    vec3 t1 = min(tmin, tmax);\n    vec3 t2 = max(tmin, tmax);\n    float tnear = max(max(t1.x, t1.y), t1.z);\n    float tfar = min(min(t2.x, t2.y), t2.z);\n    return vec2(tnear, tfar);\n}\n\nvoid main() {\n    vec3 origin = uPosition;\n    vec3 direction = uDirection + (vFragmentPosition.x * uFov) * uRight + (vFragmentPosition.y * uFov / uAsr) * uUp;\n    vec2 t = max(intersectCube(origin, direction), 0.0);\n    t.x = min(t.x, t.y);\n    float val = 0.0;\n    float tt = 0.0;\n    do {\n      vec3 pos = ((origin + direction * mix(t.x, t.y, tt)) + 1.0) * 0.5;\n      val = max(val, texture(uVolume, pos).r);\n      tt += 0.02;\n    } while (tt < 1.0);\n    //color = vec4(1.0 - val, 1.0 - val, 1.0 - val, 1.0);\n    color = vec4(val, val, val, 1.0);\n}"},"quad":{"vertex":"#version 300 es\nprecision mediump float;\n\nin vec2 aPosition;\nout vec2 vFragmentPosition;\n\nvoid main() {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    vFragmentPosition = (aPosition + vec2(1.0, 1.0)) * 0.5;\n}","fragment":"#version 300 es\nprecision mediump float;\n\nuniform mediump sampler2D uTexture;\n\nin vec2 vFragmentPosition;\nout vec4 color;\n\nvoid main() {\n    color = texture(uTexture, vFragmentPosition);\n}"},"test":{"vertex":"#version 300 es\nprecision mediump float;\n\nin vec2 aPosition;\n\nvoid main() {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n}","fragment":"#version 300 es\nprecision mediump float;\n\nout vec4 color;\n\nvoid main() {\n    color = vec4(1.0, 0.5, 0.2, 1.0);\n}"}};})(this);